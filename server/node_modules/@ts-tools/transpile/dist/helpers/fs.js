"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAllUp = exports.ensureDirectorySync = exports.getCanonicalPath = void 0;
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const typescript_1 = __importDefault(require("typescript"));
const { sys } = typescript_1.default;
exports.getCanonicalPath = sys.useCaseSensitiveFileNames
    ? (v) => v
    : (v) => v.toLowerCase();
function ensureDirectorySync(directoryPath) {
    if ((0, node_fs_1.existsSync)(directoryPath)) {
        return;
    }
    try {
        (0, node_fs_1.mkdirSync)(directoryPath);
    }
    catch (e) {
        const parentPath = (0, node_path_1.dirname)(directoryPath);
        if (parentPath === directoryPath) {
            throw e;
        }
        ensureDirectorySync(parentPath);
        (0, node_fs_1.mkdirSync)(directoryPath);
    }
}
exports.ensureDirectorySync = ensureDirectorySync;
function findAllUp(initialDirectoryPath, fileName) {
    const filePaths = [];
    let currentPath = (0, node_path_1.resolve)(initialDirectoryPath);
    let lastPath;
    while (currentPath !== lastPath) {
        const filePath = (0, node_path_1.join)(currentPath, fileName);
        if ((0, node_fs_1.existsSync)(filePath) && (0, node_fs_1.statSync)(filePath).isFile()) {
            filePaths.push(filePath);
        }
        lastPath = currentPath;
        currentPath = (0, node_path_1.dirname)(currentPath);
    }
    return filePaths;
}
exports.findAllUp = findAllUp;
//# sourceMappingURL=fs.js.map